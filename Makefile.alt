#
# settings
################################################################################


PROJNAME = ins-board

# dont show compiler calls
QUIET = 1

#
# low level settings
################################################################################

-include src/*.mk
-include ucos.mk
-include platform-abstraction.mk

# libraries & includes
INCDIR   += -I.
INCDIR   += -I./src
INCDIR   += -I./CMSIS/include
INCDIR   += -I./libopencm3/include
LIBS     += -lc -lnosys
LIBS     += -L./libopencm3/lib
LIBS	 += -L./CMSIS/lib
LIBS     += -lopencm3_stm32f4
LIBS     += -larm_cortexM4lf_math

LDSCRIPT = ./linkerscript.ld

DEFS += -DSTM32F4
DEFS += -DCPU_CFG_CPU_CORE_FREQ=168000000

# Cortex-M4f
CFLAGS   += -mthumb -mcpu=cortex-m4 -march=armv7e-m -mfloat-abi=hard -mfpu=fpv4-sp-d16
LFLAGS   += -mthumb -mcpu=cortex-m4 -march=armv7e-m -mfloat-abi=hard -mfpu=fpv4-sp-d16

# C & C++ compiler flags
CFLAGS   += -fno-common -ffunction-sections -fdata-sections
CFLAGS   += $(OPTIMIZATION) -g  -Wall -Wextra -Wno-unused-parameter
CFLAGS   += $(DEFS) $(INCDIR) -fomit-frame-pointer -MD
# C only flags
CCFLAGS  += -Wstrict-prototypes
# C++ only flags
#CPPFLAGS += -fno-rtti -fno-exceptions -fno-unwind-tables
#CPPFLAGS += -fno-use-cxa-atexit
# Linker flags
LFLAGS   += $(LIBS) -T$(LDSCRIPT) -nostartfiles -Wl,-Map=$(PROJNAME).map
LFLAGS   += -Wl,--gc-sections

CCFLAGS  += $(CFLAGS)
CPPFLAGS += $(CFLAGS)

ASFLAGS = $(CFLAGS)

# gcc optimization level
OPTIMIZATION    = -Os

CC  = arm-none-eabi-gcc
CPP = arm-none-eabi-g++
AS  = arm-none-eabi-gcc -x assembler-with-cpp
LD  = arm-none-eabi-gcc
AR  = arm-none-eabi-ar
OC  = arm-none-eabi-objcopy
OD  = arm-none-eabi-objdump
NM  = arm-none-eabi-nm
SZ  = arm-none-eabi-size

OBJECTS = $(CSOURCES:.c=.o) $(ASOURCES:.s=.o) $(CPPSOURCES:.cpp=.o)

COLOR    = \033[1;31m
COLOR_CL = \033[0m

ifeq ($(QUIET),1)
Q = @
endif

#
# targets:
################################################################################

.PHONY: all
all: $(PROJNAME).bin $(PROJNAME).lst $(PROJNAME).size.txt
	@ printf "$(COLOR)%s$(COLOR_CL)\n" "> done: $(PROJNAME)"
	@ $(SZ) $(PROJNAME).elf

.PHONY: clean
clean:
	$(Q)-rm -f $(OBJECTS)
	$(Q)-rm -f $(OBJECTS:.o=.lst)
	$(Q)-rm -f $(OBJECTS:.o=.d)
	$(Q)-rm -f $(PROJNAME).elf
	$(Q)-rm -f $(PROJNAME).bin
	$(Q)-rm -f $(PROJNAME).lst
	$(Q)-rm -f $(PROJNAME).map
	$(Q)-rm -f $(PROJNAME).size.txt

.PHONY: rebuild
rebuild: clean all

-include tools/*.mk

#
# file targets:
################################################################################

# binary
$(PROJNAME).bin: $(PROJNAME).elf
	@ printf "$(COLOR)%s$(COLOR_CL)\n" "> copying"
	$(Q)$(OC) -Obinary -j .text -j .rodata -j .data $(PROJNAME).elf $(PROJNAME).bin

# assembly listing
$(PROJNAME).lst: $(PROJNAME).elf
	@ printf "$(COLOR)%s$(COLOR_CL)\n" "> generating assembly listing"
	@ -touch $(PROJNAME).lst
	$(Q)$(OD) -D -h $(PROJNAME).elf > $(PROJNAME).lst

# linked elf-object
$(PROJNAME).elf: $(OBJECTS) $(LDSCRIPT)
	@ printf "$(COLOR)%s$(COLOR_CL)\n" "> linking"
	$(Q)$(LD) -o $(PROJNAME).elf $(OBJECTS) $(LFLAGS)

# object from assembly
%.o: %.s Makefile
	@ printf "$(COLOR)%s$(COLOR_CL)\n" "> assembling ("$<")"
	$(Q)$(AS) $(ASFLAGS) -o $@ -c $<

# object from c
%.o: %.c Makefile
	@ printf "$(COLOR)%s$(COLOR_CL)\n" "> compiling ("$<")"
	$(Q)$(CC) $(CCFLAGS) -Wa,-ahlms=$(<:.c=.lst) -o $@ -c $<

# object from c++
%.o: %.cpp Makefile
	@ printf "$(COLOR)%s$(COLOR_CL)\n" "> compiling ("$<")"
	$(Q)$(CPP) $(CPPFLAGS) -Wa,-ahlms=$(<:.cpp=.lst) -o $@ -c $<

# space usage
$(PROJNAME).size.txt: $(PROJNAME).elf
	@ printf "$(COLOR)%s$(COLOR_CL)\n" "> calculating space usage"
	$(Q)$(SZ) $(PROJNAME).elf > $(PROJNAME).size.txt
	$(Q)$(NM) --numeric-sort --print-size -S $(PROJNAME).elf >> $(PROJNAME).size.txt

# include the dependencies for all objects
# (generated by the -MD compiler-flag)
-include $(OBJECTS:.o=.d)
